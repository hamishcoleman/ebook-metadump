#!/usr/bin/env python2
#

import sys
import os
import yaml
import argparse

path = os.environ.get('CALIBRE_PYTHON_PATH', '/usr/lib/calibre')
if path not in sys.path:
    sys.path.insert(0, path)

sys.resources_location = os.environ.get('CALIBRE_RESOURCES_PATH', '/usr/share/calibre') # noqa
sys.extensions_location = os.environ.get('CALIBRE_EXTENSIONS_PATH', '/usr/lib/calibre/calibre/plugins') # noqa
# sys.executables_location = os.environ.get('CALIBRE_EXECUTABLES_PATH', '/usr/bin') # noqa

from calibre.ebooks.metadata.meta import get_metadata # noqa


def argparser():
    parser = argparse.ArgumentParser(
            description='Gather data from ebook')
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('filename', nargs='+', help='Book filename(s)')
    return parser.parse_args()


def do_one_file(fh, verbose):
    stream_type = os.path.splitext(fh.name)[1].replace('.', '').lower()

    mi = get_metadata(fh, stream_type, force_read_metadata=True)

    fields = mi.all_field_keys()
    db = dict()

    for field in fields:
        db[field] = mi.get(field)

    if verbose:
        # remove some items that are far too verbose..
        del db['cover_data']
        del db['guide']
        del db['manifest']
        del db['spine']
        del db['comments']

        output = dict()
        output[str(fh.name)] = db

        print(yaml.dump(output))


def main():
    args = argparser()

    for filename in args.filename:
        fh = open(filename, 'rb')
        do_one_file(fh, args.verbose)

    return 0


if __name__ == "__main__":
    sys.exit(main())
