#!/usr/bin/env python2
#

import sys
import os
import yaml
import argparse
import string

path = os.environ.get('CALIBRE_PYTHON_PATH', '/usr/lib/calibre')
if path not in sys.path:
    sys.path.insert(0, path)

sys.resources_location = os.environ.get('CALIBRE_RESOURCES_PATH', '/usr/share/calibre') # noqa
sys.extensions_location = os.environ.get('CALIBRE_EXTENSIONS_PATH', '/usr/lib/calibre/calibre/plugins') # noqa
# sys.executables_location = os.environ.get('CALIBRE_EXECUTABLES_PATH', '/usr/bin') # noqa

from calibre.ebooks.metadata.meta import get_metadata # noqa


def argparser():
    parser = argparse.ArgumentParser(
            description='Gather data from ebook')
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument(
            '-f', '--fields', action='append', help='field(s) to extract')
    parser.add_argument(
            '-t', '--template', action='store', help='output template')
    parser.add_argument('filename', nargs='+', help='Book filename(s)')
    return parser.parse_args()


class dictwrap(object):
    def __init__(self, obj):
        self.obj = obj
        self.dict = dict()

    def __getitem__(self, key):
        if key in self.dict:
            return self.dict[key]
        return self.obj.get(key)

    def __setitem__(self, key, value):
        self.dict[key] = value


def sanitise(mi):
    """Try to extract sane data from the chaos"""

    # default to assuming bad data
    mi['_result'] = '_unset'

    languages = mi['languages']
    if 'en' in languages:
        mi['lang'] = 'eng'
    elif 'eng' in languages:
        mi['lang'] = 'eng'
    elif len(languages) == 1:
        mi['lang'] = languages[0].strip()
    elif len(languages):
        mi['lang'] = '_not_eng'
        mi['_result'] = '_bad'
    else:
        mi['lang'] = '_unknown'
        mi['_result'] = '_bad'

    authors = mi['authors']
    if len(authors) == 1:
        mi['author'] = authors[0].strip()
    elif len(authors) == 0:
        mi['author'] = '_unknown'
        mi['_result'] = '_bad'
    else:
        mi['author'] = '_too_many'
        mi['_result'] = '_bad'

    count_commas = mi['author'].count(',')
    if count_commas == 1:
        # Assume it is "lastname, firstname"
        names = mi['author'].split(',')
        names.reverse()
        mi['author'] = ' '.join(names).strip()
    elif count_commas > 1:
        mi['author'] = '_too_many_commas'
        mi['_result'] = '_bad'

    # replace multiple whitespaces with just one underscore
    mi['author'] = '_'.join(mi['author'].split())
    mi['author'] = mi['author'].replace('"','')

    mi['_title'] = mi['title'].strip().replace(' ','_').replace("'",'')


def do_one_file(filename, args):
    fh = open(filename, 'rb')
    stream_type = os.path.splitext(filename)[1].replace('.', '').lower()

    mi = get_metadata(fh, stream_type, force_read_metadata=True)

    mid = dictwrap(mi)
    mid['_filename'] = filename

    sanitise(mid)

    if args.fields is not None:
        for field in args.fields:
            print(mid[field])

    if args.template is not None:
        print(string.Template(args.template).substitute(mid))

    if args.verbose:
        fields = mi.all_field_keys()
        db = dict()

        for field in fields:
            db[field] = mi.get(field)

        # remove some items that are far too verbose..
        del db['cover_data']
        del db['guide']
        del db['manifest']
        del db['spine']
        del db['comments']

        output = dict()
        output[str(filename)] = db

        print(yaml.dump(output))


def do_walk(path, args):
    for dirpath, dirs, files in os.walk(path):
        for filename in files:
            if not os.path.isdir(filename):
                do_one_file(os.path.join(dirpath, filename), args)


def main():
    args = argparser()

    for filename in args.filename:
        if os.path.isdir(filename):
            do_walk(filename, args)
        else:
            do_one_file(filename, args)

    return 0


if __name__ == "__main__":
    sys.exit(main())
